// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: v1/encryption-service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EncryptionService_HasEncryptedVault_FullMethodName             = "/v1.EncryptionService/HasEncryptedVault"
	EncryptionService_GetEncryptedVaultKey_FullMethodName          = "/v1.EncryptionService/GetEncryptedVaultKey"
	EncryptionService_CreateEncryptedVault_FullMethodName          = "/v1.EncryptionService/CreateEncryptedVault"
	EncryptionService_RequestEncryptedVaultDeletion_FullMethodName = "/v1.EncryptionService/RequestEncryptedVaultDeletion"
	EncryptionService_DeleteEncryptedVault_FullMethodName          = "/v1.EncryptionService/DeleteEncryptedVault"
	EncryptionService_GetRecipeKeyRequests_FullMethodName          = "/v1.EncryptionService/GetRecipeKeyRequests"
	EncryptionService_RequestRecipeKeyAccess_FullMethodName        = "/v1.EncryptionService/RequestRecipeKeyAccess"
	EncryptionService_GetRecipeKey_FullMethodName                  = "/v1.EncryptionService/GetRecipeKey"
	EncryptionService_SetRecipeKey_FullMethodName                  = "/v1.EncryptionService/SetRecipeKey"
	EncryptionService_DeleteRecipeKey_FullMethodName               = "/v1.EncryptionService/DeleteRecipeKey"
)

// EncryptionServiceClient is the client API for EncryptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncryptionServiceClient interface {
	HasEncryptedVault(ctx context.Context, in *HasEncryptedVaultRequest, opts ...grpc.CallOption) (*HasEncryptedVaultResponse, error)
	GetEncryptedVaultKey(ctx context.Context, in *GetEncryptedVaultKeyRequest, opts ...grpc.CallOption) (*GetEncryptedVaultKeyResponse, error)
	CreateEncryptedVault(ctx context.Context, in *CreateEncryptedVaultRequest, opts ...grpc.CallOption) (*CreateEncryptedVaultResponse, error)
	RequestEncryptedVaultDeletion(ctx context.Context, in *RequestEncryptedVaultDeletionRequest, opts ...grpc.CallOption) (*RequestEncryptedVaultDeletionResponse, error)
	DeleteEncryptedVault(ctx context.Context, in *DeleteEncryptedVaultRequest, opts ...grpc.CallOption) (*DeleteEncryptedVaultResponse, error)
	GetRecipeKeyRequests(ctx context.Context, in *GetRecipeKeyRequestsRequest, opts ...grpc.CallOption) (*GetRecipeKeyRequestsResponse, error)
	RequestRecipeKeyAccess(ctx context.Context, in *RequestRecipeKeyAccessRequest, opts ...grpc.CallOption) (*RequestRecipeKeyAccessResponse, error)
	GetRecipeKey(ctx context.Context, in *GetRecipeKeyRequest, opts ...grpc.CallOption) (*GetRecipeKeyResponse, error)
	SetRecipeKey(ctx context.Context, in *SetRecipeKeyRequest, opts ...grpc.CallOption) (*SetRecipeKeyResponse, error)
	DeleteRecipeKey(ctx context.Context, in *DeleteRecipeKeyRequest, opts ...grpc.CallOption) (*DeleteRecipeKeyResponse, error)
}

type encryptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEncryptionServiceClient(cc grpc.ClientConnInterface) EncryptionServiceClient {
	return &encryptionServiceClient{cc}
}

func (c *encryptionServiceClient) HasEncryptedVault(ctx context.Context, in *HasEncryptedVaultRequest, opts ...grpc.CallOption) (*HasEncryptedVaultResponse, error) {
	out := new(HasEncryptedVaultResponse)
	err := c.cc.Invoke(ctx, EncryptionService_HasEncryptedVault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) GetEncryptedVaultKey(ctx context.Context, in *GetEncryptedVaultKeyRequest, opts ...grpc.CallOption) (*GetEncryptedVaultKeyResponse, error) {
	out := new(GetEncryptedVaultKeyResponse)
	err := c.cc.Invoke(ctx, EncryptionService_GetEncryptedVaultKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) CreateEncryptedVault(ctx context.Context, in *CreateEncryptedVaultRequest, opts ...grpc.CallOption) (*CreateEncryptedVaultResponse, error) {
	out := new(CreateEncryptedVaultResponse)
	err := c.cc.Invoke(ctx, EncryptionService_CreateEncryptedVault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) RequestEncryptedVaultDeletion(ctx context.Context, in *RequestEncryptedVaultDeletionRequest, opts ...grpc.CallOption) (*RequestEncryptedVaultDeletionResponse, error) {
	out := new(RequestEncryptedVaultDeletionResponse)
	err := c.cc.Invoke(ctx, EncryptionService_RequestEncryptedVaultDeletion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) DeleteEncryptedVault(ctx context.Context, in *DeleteEncryptedVaultRequest, opts ...grpc.CallOption) (*DeleteEncryptedVaultResponse, error) {
	out := new(DeleteEncryptedVaultResponse)
	err := c.cc.Invoke(ctx, EncryptionService_DeleteEncryptedVault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) GetRecipeKeyRequests(ctx context.Context, in *GetRecipeKeyRequestsRequest, opts ...grpc.CallOption) (*GetRecipeKeyRequestsResponse, error) {
	out := new(GetRecipeKeyRequestsResponse)
	err := c.cc.Invoke(ctx, EncryptionService_GetRecipeKeyRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) RequestRecipeKeyAccess(ctx context.Context, in *RequestRecipeKeyAccessRequest, opts ...grpc.CallOption) (*RequestRecipeKeyAccessResponse, error) {
	out := new(RequestRecipeKeyAccessResponse)
	err := c.cc.Invoke(ctx, EncryptionService_RequestRecipeKeyAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) GetRecipeKey(ctx context.Context, in *GetRecipeKeyRequest, opts ...grpc.CallOption) (*GetRecipeKeyResponse, error) {
	out := new(GetRecipeKeyResponse)
	err := c.cc.Invoke(ctx, EncryptionService_GetRecipeKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) SetRecipeKey(ctx context.Context, in *SetRecipeKeyRequest, opts ...grpc.CallOption) (*SetRecipeKeyResponse, error) {
	out := new(SetRecipeKeyResponse)
	err := c.cc.Invoke(ctx, EncryptionService_SetRecipeKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) DeleteRecipeKey(ctx context.Context, in *DeleteRecipeKeyRequest, opts ...grpc.CallOption) (*DeleteRecipeKeyResponse, error) {
	out := new(DeleteRecipeKeyResponse)
	err := c.cc.Invoke(ctx, EncryptionService_DeleteRecipeKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncryptionServiceServer is the server API for EncryptionService service.
// All implementations must embed UnimplementedEncryptionServiceServer
// for forward compatibility
type EncryptionServiceServer interface {
	HasEncryptedVault(context.Context, *HasEncryptedVaultRequest) (*HasEncryptedVaultResponse, error)
	GetEncryptedVaultKey(context.Context, *GetEncryptedVaultKeyRequest) (*GetEncryptedVaultKeyResponse, error)
	CreateEncryptedVault(context.Context, *CreateEncryptedVaultRequest) (*CreateEncryptedVaultResponse, error)
	RequestEncryptedVaultDeletion(context.Context, *RequestEncryptedVaultDeletionRequest) (*RequestEncryptedVaultDeletionResponse, error)
	DeleteEncryptedVault(context.Context, *DeleteEncryptedVaultRequest) (*DeleteEncryptedVaultResponse, error)
	GetRecipeKeyRequests(context.Context, *GetRecipeKeyRequestsRequest) (*GetRecipeKeyRequestsResponse, error)
	RequestRecipeKeyAccess(context.Context, *RequestRecipeKeyAccessRequest) (*RequestRecipeKeyAccessResponse, error)
	GetRecipeKey(context.Context, *GetRecipeKeyRequest) (*GetRecipeKeyResponse, error)
	SetRecipeKey(context.Context, *SetRecipeKeyRequest) (*SetRecipeKeyResponse, error)
	DeleteRecipeKey(context.Context, *DeleteRecipeKeyRequest) (*DeleteRecipeKeyResponse, error)
	mustEmbedUnimplementedEncryptionServiceServer()
}

// UnimplementedEncryptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEncryptionServiceServer struct {
}

func (UnimplementedEncryptionServiceServer) HasEncryptedVault(context.Context, *HasEncryptedVaultRequest) (*HasEncryptedVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasEncryptedVault not implemented")
}
func (UnimplementedEncryptionServiceServer) GetEncryptedVaultKey(context.Context, *GetEncryptedVaultKeyRequest) (*GetEncryptedVaultKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncryptedVaultKey not implemented")
}
func (UnimplementedEncryptionServiceServer) CreateEncryptedVault(context.Context, *CreateEncryptedVaultRequest) (*CreateEncryptedVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEncryptedVault not implemented")
}
func (UnimplementedEncryptionServiceServer) RequestEncryptedVaultDeletion(context.Context, *RequestEncryptedVaultDeletionRequest) (*RequestEncryptedVaultDeletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestEncryptedVaultDeletion not implemented")
}
func (UnimplementedEncryptionServiceServer) DeleteEncryptedVault(context.Context, *DeleteEncryptedVaultRequest) (*DeleteEncryptedVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEncryptedVault not implemented")
}
func (UnimplementedEncryptionServiceServer) GetRecipeKeyRequests(context.Context, *GetRecipeKeyRequestsRequest) (*GetRecipeKeyRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeKeyRequests not implemented")
}
func (UnimplementedEncryptionServiceServer) RequestRecipeKeyAccess(context.Context, *RequestRecipeKeyAccessRequest) (*RequestRecipeKeyAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRecipeKeyAccess not implemented")
}
func (UnimplementedEncryptionServiceServer) GetRecipeKey(context.Context, *GetRecipeKeyRequest) (*GetRecipeKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeKey not implemented")
}
func (UnimplementedEncryptionServiceServer) SetRecipeKey(context.Context, *SetRecipeKeyRequest) (*SetRecipeKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRecipeKey not implemented")
}
func (UnimplementedEncryptionServiceServer) DeleteRecipeKey(context.Context, *DeleteRecipeKeyRequest) (*DeleteRecipeKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecipeKey not implemented")
}
func (UnimplementedEncryptionServiceServer) mustEmbedUnimplementedEncryptionServiceServer() {}

// UnsafeEncryptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncryptionServiceServer will
// result in compilation errors.
type UnsafeEncryptionServiceServer interface {
	mustEmbedUnimplementedEncryptionServiceServer()
}

func RegisterEncryptionServiceServer(s grpc.ServiceRegistrar, srv EncryptionServiceServer) {
	s.RegisterService(&EncryptionService_ServiceDesc, srv)
}

func _EncryptionService_HasEncryptedVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasEncryptedVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).HasEncryptedVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_HasEncryptedVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).HasEncryptedVault(ctx, req.(*HasEncryptedVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_GetEncryptedVaultKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEncryptedVaultKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).GetEncryptedVaultKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_GetEncryptedVaultKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).GetEncryptedVaultKey(ctx, req.(*GetEncryptedVaultKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_CreateEncryptedVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEncryptedVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).CreateEncryptedVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_CreateEncryptedVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).CreateEncryptedVault(ctx, req.(*CreateEncryptedVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_RequestEncryptedVaultDeletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEncryptedVaultDeletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).RequestEncryptedVaultDeletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_RequestEncryptedVaultDeletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).RequestEncryptedVaultDeletion(ctx, req.(*RequestEncryptedVaultDeletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_DeleteEncryptedVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEncryptedVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).DeleteEncryptedVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_DeleteEncryptedVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).DeleteEncryptedVault(ctx, req.(*DeleteEncryptedVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_GetRecipeKeyRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeKeyRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).GetRecipeKeyRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_GetRecipeKeyRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).GetRecipeKeyRequests(ctx, req.(*GetRecipeKeyRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_RequestRecipeKeyAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRecipeKeyAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).RequestRecipeKeyAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_RequestRecipeKeyAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).RequestRecipeKeyAccess(ctx, req.(*RequestRecipeKeyAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_GetRecipeKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).GetRecipeKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_GetRecipeKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).GetRecipeKey(ctx, req.(*GetRecipeKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_SetRecipeKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRecipeKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).SetRecipeKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_SetRecipeKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).SetRecipeKey(ctx, req.(*SetRecipeKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_DeleteRecipeKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecipeKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).DeleteRecipeKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_DeleteRecipeKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).DeleteRecipeKey(ctx, req.(*DeleteRecipeKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EncryptionService_ServiceDesc is the grpc.ServiceDesc for EncryptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EncryptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.EncryptionService",
	HandlerType: (*EncryptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HasEncryptedVault",
			Handler:    _EncryptionService_HasEncryptedVault_Handler,
		},
		{
			MethodName: "GetEncryptedVaultKey",
			Handler:    _EncryptionService_GetEncryptedVaultKey_Handler,
		},
		{
			MethodName: "CreateEncryptedVault",
			Handler:    _EncryptionService_CreateEncryptedVault_Handler,
		},
		{
			MethodName: "RequestEncryptedVaultDeletion",
			Handler:    _EncryptionService_RequestEncryptedVaultDeletion_Handler,
		},
		{
			MethodName: "DeleteEncryptedVault",
			Handler:    _EncryptionService_DeleteEncryptedVault_Handler,
		},
		{
			MethodName: "GetRecipeKeyRequests",
			Handler:    _EncryptionService_GetRecipeKeyRequests_Handler,
		},
		{
			MethodName: "RequestRecipeKeyAccess",
			Handler:    _EncryptionService_RequestRecipeKeyAccess_Handler,
		},
		{
			MethodName: "GetRecipeKey",
			Handler:    _EncryptionService_GetRecipeKey_Handler,
		},
		{
			MethodName: "SetRecipeKey",
			Handler:    _EncryptionService_SetRecipeKey_Handler,
		},
		{
			MethodName: "DeleteRecipeKey",
			Handler:    _EncryptionService_DeleteRecipeKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/encryption-service.proto",
}
